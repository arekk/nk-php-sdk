<?php

/**
 * Test class for NKService.
 * Generated by PHPUnit on 2011-11-25 at 12:20:20.
 */
class NKServiceTest extends PHPUnit_Framework_TestCase
{
  public function testSetConfigObject()
  {
    $config = new NKConfig();
    $config->key = 'some_key';
    $config->secret = 'b24d8cb6-74ff-4fff-9ea1-ffff5a8b9bff';

    $service = new NKService();

    $this->assertSame($service, $service->setConfig($config));
    $this->assertSame($config, $service->getConfig());
  }

  public function testSetConfigArray()
  {
    $config = array('key' => 'some_key', 'secret' => 'b24d8cb6-74ff-4fff-9ea1-ffff5a8b9bff');

    $service = new NKService();

    $this->assertSame($service, $service->setConfig($config));
    $this->assertInstanceOf('NKConfig', $service->getConfig());
    $this->assertSame($service->getConfig()->key, 'some_key');
    $this->assertSame($service->getConfig()->secret, 'b24d8cb6-74ff-4fff-9ea1-ffff5a8b9bff');
  }

  /**
   *
   */
  public function testDebug()
  {
    $service = new NKService();
    $this->assertSame($service, $service->debug());
  }

  /**
   * @todo Implement testPhotoAlbums().
   */
  public function testPhotoAlbums()
  {
    $user = new NKUser('person.abcd');
    $data = json_decode('{
     "startIndex":0,
     "totalResults":2,
     "itemsPerPage":2,
     "entry":[
       {
         "id":"album.3",
         "title":"some title",
         "description":"some description",
         "ownerId":"person.abc",
         "mediaMimeType":["image/jpeg"],
         "mediaType":["image"],
         "mediaItemCount":1
       },{
         "id":"album.2",
         "title":"another title",
         "description":"another description",
         "ownerId":"person.abc",
         "mediaMimeType":["image/jpeg"],
         "thumbnailUrl":"http://photos.nasza-klasa.pl/125/10/thumb/6646b702e7.jpeg",
         "mediaType":["image"],
         "mediaItemCount":3
       }]
    }', true);

    $service = $this->getMock('NKService', array('getConfig', 'call'));

    $service->expects($this->any())->method('getConfig')->will($this->returnValue(new NKConfig()));
    $service->expects($this->once())->method('call')->with('/albums/person.abcd/@self')->will($this->returnValue($data));

    $result = $service->photoAlbums($user);

    $this->assertTrue(is_array($result));
    $this->assertEquals(2, count($result));

    $album = current($result);

    $this->assertInstanceOf('NKPhotoAlbum', $album);
    $this->assertSame('album.3', $album->id());
    $this->assertSame('some title', $album->title());

    next($result);
    $album = current($result);

    $this->assertInstanceOf('NKPhotoAlbum', $album);
    $this->assertSame('album.2', $album->id());
    $this->assertSame('another title', $album->title());
  }

  /**
   * 
   */
  public function testPhotos()
  {
    $album = new NKPhotoAlbum('album.1', 'person.1332123');
    $data = json_decode('{
     "startIndex":0,
     "totalResults":2,
     "itemsPerPage":2,
     "entry":[
       {
         "id":"mediaitem.82",
         "albumId":"album.1",
         "numVotes":"0",
         "rating":"0",
         "created":"2010-03-23T10:41:51.000Z",
         "url":"http://photos.nasza-klasa.pl/3/3/thumb/8e5e0bfd4a.jpeg",
         "thumbnailUrl":"http://photos.nk-net.pl/22/75/thumb/8cce9c2424.jpeg",
         "type":"image",
         "mimeType":"image/jpeg",
         "nk_addedBy":"person.1332123",
         "description":"jhgujk",
         "nkNumSuperVotes":"0",
         "nkCreatedTime":1306926434000
       },{
         "id":"mediaitem.81",
         "albumId":"album.1",
         "numVotes":1,
         "rating":4,
         "created":"2010-03-23T10:29:14.000Z",
         "thumbnailUrl":"http://photos.nasza-klasa.pl/125/10/thumb/6646b702e7.jpeg",
         "type":"image",
         "url":"http://photos.nasza-klasa.pl/3/3/thumb/8e5e0bfd4a.jpeg",
         "mimeType":"image/jpeg",
         "nk_addedBy":"person.1332123",
         "nkNumSuperVotes":"0",
         "nkCreatedTime":1306926432000
       }]
    }', true);

    $service = $this->getMock('NKService', array('getConfig', 'call'));

    $service->expects($this->any())->method('getConfig')->will($this->returnValue(new NKConfig()));
    $service->expects($this->once())->method('call')->with('/mediaItems/person.1332123/@self/album.1')->will($this->returnValue($data));

    $result = $service->photos($album);

    $this->assertTrue(is_array($result));
    $this->assertEquals(2, count($result));

    $photo = current($result);

    $this->assertInstanceOf('NKPhoto', $photo);
    $this->assertSame('mediaitem.82', $photo->id());
    $this->assertSame('person.1332123', $photo->nk_addedBy());

    next($result);
    $photo = current($result);

    $this->assertInstanceOf('NKPhoto', $photo);
    $this->assertSame('mediaitem.81', $photo->id());
    $this->assertSame('person.1332123', $photo->nk_addedBy());
  }

  /**
   *
   */
  public function testMe()
  {
    $data = json_decode('{
     "entry":{
       "profileUrl":"http://nk.pl/profile/1",
       "gender":"male",
       "hasApp":true,
       "id":"person.abc",
       "age":31,
       "nkFriendsCount":57,
       "thumbnailUrl":"http://photos.nasza-klasa.pl/125/10/thumb/6646b702e7.jpeg",
       "name":{
         "formatted":"Anna Kowalska (Nowak)",
         "additionalName":"Kowalska (Nowak)",
         "familyName":"Kowalska",
         "givenName":"Anna"
       },
       "urls":[{"value":"http://nk.pl/profile/1","type":"profile"}],
       "phoneNumbers":[
         {"value":"my E51","type":"phone_number"}
       ],
       "photos":[
         {
           "value":"http://photos.nasza-klasa.pl/125/10/thumb/6646b702e7.jpeg",
           "type":"thumbnail"
         }],
       "displayName":"Mr Sponge",
       "currentLocation":{
         "region":"WrocLove"
       }
     }
    }', true);

    $service = $this->getMock('NKService', array('getConfig', 'call'));

    $service->expects($this->any())->method('getConfig')->will($this->returnValue(new NKConfig()));
    $service->expects($this->once())->method('call')->will($this->returnValue($data));

    $result = $service->me();
    
    $this->assertInstanceOf('NKUser', $result);
    $this->assertSame('person.abc', $result->id());
    $this->assertSame('Mr Sponge', $result->name());
  }
  
  /**
   * @expectedException NKServiceMissingException
   */
  public function testCall404()
  {
    $token = $this->getMock('NKTokenProvider');
    
    $client = $this->getMock('NKHttpClient');
    $client->expects($this->any())->method('getResponseCode')->will($this->returnValue(404));

    $conf = new NKConfig();
    $conf->id = 1;
    $conf->key = 'test';
    $conf->secret = 'b24d8cb6-74ff-4fff-9ea1-ffff5a8b9bb8';

    $service = $this->getMock('NKService', array('getTokenProvider', 'getConfig', 'getHttpClient'));
    $service->expects($this->any())->method('getTokenProvider')->will($this->returnValue($token));
    $service->expects($this->any())->method('getConfig')->will($this->returnValue($conf));
    $service->expects($this->once())->method('getHttpClient')->will($this->returnValue($client));
    
    $service->call('/some/url');
  }

  /**
   * @expectedException NKServiceMissingPermissionException
   */
  public function testCall401()
  {
    $token = $this->getMock('NKTokenProvider');

    $client = $this->getMock('NKHttpClient');
    $client->expects($this->any())->method('getResponseCode')->will($this->returnValue(401));

    $conf = new NKConfig();
    $conf->id = 1;
    $conf->key = 'test';
    $conf->secret = 'b24d8cb6-74ff-4fff-9ea1-ffff5a8b9bb8';

    $service = $this->getMock('NKService', array('getTokenProvider', 'getConfig', 'getHttpClient'));

    $service->expects($this->any())->method('getTokenProvider')->will($this->returnValue($token));
    $service->expects($this->any())->method('getConfig')->will($this->returnValue($conf));
    $service->expects($this->once())->method('getHttpClient')->will($this->returnValue($client));

    $service->call('/some/url');
  }

  /**
   * @expectedException NKServiceHttpException
   */
  public function testCallUnknownCode()
  {
    $token = $this->getMock('NKTokenProvider');

    $client = $this->getMock('NKHttpClient');
    $client->expects($this->any())->method('getResponseCode')->will($this->returnValue(123));

    $conf = new NKConfig();
    $conf->id = 1;
    $conf->key = 'test';
    $conf->secret = 'b24d8cb6-74ff-4fff-9ea1-ffff5a8b9bb8';

    $service = $this->getMock('NKService', array('getTokenProvider', 'getConfig', 'getHttpClient'));

    $service->expects($this->any())->method('getTokenProvider')->will($this->returnValue($token));
    $service->expects($this->any())->method('getConfig')->will($this->returnValue($conf));
    $service->expects($this->once())->method('getHttpClient')->will($this->returnValue($client));

    $service->call('/some/url');
  }

  /**
   *
   */
  public function testCallGet200()
  {
    $data = array('aaa' => 'bbb');

    $conf = new NKConfig();
    $conf->key = 'test';
    $conf->secret = 'b24d8cb6-74ff-4fff-9ea1-ffff5a8b9bff';


    $token = $this->getMock('NKTokenProvider');
    $token->expects($this->any())->method('getToken')->will($this->returnValue('some_token'));

    $client = $this->getMock('NKHttpClient');
    $client->expects($this->once())->method('exec')->with(NKService::BASE_URL . "/some/url?nk_token=some_token");
    $client->expects($this->any())->method('getResponseCode')->will($this->returnValue(200));
    $client->expects($this->any())->method('getResponse')->will($this->returnValue(json_encode($data)));

    $service = $this->getMock('NKService', array('getTokenProvider', 'getConfig', 'getHttpClient'));

    $service->expects($this->any())->method('getTokenProvider')->will($this->returnValue($token));
    $service->expects($this->any())->method('getConfig')->will($this->returnValue($conf));
    $service->expects($this->once())->method('getHttpClient')->will($this->returnValue($client));

    $this->assertSame($data, $service->call("/some/url"));
  }
}
?>