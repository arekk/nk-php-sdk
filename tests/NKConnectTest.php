<?php

/**
 * Test class for NKConnect.
 * Generated by PHPUnit on 2011-12-06 at 16:57:23.
 */
class NKConnectTest extends PHPUnit_Framework_TestCase
{
  /**
   * @var NKConnect
   */
  protected $object;

  /**
   * @var NKHttpRequest
   */
  protected $request;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp()
  {
    $this->request = $this->getMock('NKHttpRequest', array('terminate', 'headersSent', 'header', 'getServerData', 'getPostData', 'getRequestData', 'startSessionIfRequired', 'getSessionData', 'setSessionData', 'unsetSessionData'));
    $this->request->expects($this->any())->method('headersSent')->will($this->returnValue(false));

    $c = new NKConfig();
    $c->key = 'some_key';

    $this->object = $this->getMock('NKConnect', array('getConfig', 'getHttpRequest'), array(), '', false);
    $this->object->expects($this->any())->method('getConfig')->will($this->returnValue($c));
    $this->object->expects($this->any())->method('getHttpRequest')->will($this->returnValue($this->request));
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown()
  {
  }

  /**
   *
   */
  public function testHandleCallbackState1()
  {
    $s = array(
      'HTTPS'       => 'on',
      'HTTP_HOST'   => 'localhost',
      'REQUEST_URI' => '/some/path.php?aaa=bbb'
    );

    $this->request->expects($this->any())->method('getServerData')->will($this->returnValue($s));
    $this->request->expects($this->any())->method('getRequestData')->will($this->returnValue(array('nkconnect_state' => '1')));
    $this->request->expects($this->once())->method('terminate');

    ob_start();
    $this->object->handleCallback();
    $result = ob_get_clean();

    $this->assertTag(array('tag' => 'head'), $result);
    $this->assertTag(array('tag' => 'body'), $result);
    $this->assertTag(array('tag' => 'script'), $result);

    $this->assertContains('nk.OAuth.is_token_available(callback)', $result);
    $this->assertContains('https://localhost/some/path.php?aaa=bbb&nkconnect_state=2', $result);
  }

  /**
   *
   */
  public function testHandleCallbackState2Pass()
  {
    $s = array(
      'HTTPS'         => 'on',
      'HTTP_HOST'     => 'localhost',
      'REQUEST_URI'   => '/some/path.php?aaa=bbb',
      'REQUEST_METHOD'=> 'POST',
    );

    $p = array(
      'nkconnect_otp'   => 'aaaa_bbbb',
      'nkconnect_token' => 'token_abc'
    );

    $ss = array(
      'nkconnect_some_key_otp' => 'aaaa_bbbb',
    );

    $this->request->expects($this->any())->method('getServerData')->will($this->returnValue($s));
    $this->request->expects($this->any())->method('getPostData')->will($this->returnValue($p));
    $this->request->expects($this->any())->method('getSessionData')->will($this->returnValue($ss));
    $this->request->expects($this->any())->method('getRequestData')->will($this->returnValue(array('nkconnect_state' => '2')));
    $this->request->expects($this->at(4))->method('setSessionData')->with('nkconnect_some_key_token', 'token_abc');
    $this->request->expects($this->at(5))->method('setSessionData')->with('nkconnect_some_key_token_exp');
    $this->request->expects($this->once())->method('terminate');

    ob_start();
    $this->object->handleCallback();
    $result = ob_get_clean();

    $this->assertSame('{"result":true,"error":"","redirect":"https:\/\/localhost\/some\/path.php?aaa=bbb&nkconnect_state=3"}', $result);
  }

  public function testHandleCallbackState2Fail1()
  {
    $s = array(
      'HTTPS'         => 'on',
      'HTTP_HOST'     => 'localhost',
      'REQUEST_URI'   => '/some/path.php?aaa=bbb',
      'REQUEST_METHOD'=> 'GET',
    );

    $p = array(
      'nkconnect_otp'   => 'aaaa_bbbb',
      'nkconnect_token' => 'token_abc'
    );

    $ss = array(
      'nkconnect_some_key_otp' => 'aaaa_bbbb',
    );

    $this->request->expects($this->any())->method('getServerData')->will($this->returnValue($s));
    $this->request->expects($this->any())->method('getPostData')->will($this->returnValue($p));
    $this->request->expects($this->any())->method('getSessionData')->will($this->returnValue($ss));
    $this->request->expects($this->any())->method('getRequestData')->will($this->returnValue(array('nkconnect_state' => '2')));
    $this->request->expects($this->once())->method('terminate');

    ob_start();
    $this->object->handleCallback();
    $result = ob_get_clean();

    $this->assertContains('"result":false', $result);
  }

  public function testHandleCallbackState2Fail2()
  {
    $s = array(
      'HTTPS'         => 'on',
      'HTTP_HOST'     => 'localhost',
      'REQUEST_URI'   => '/some/path.php?aaa=bbb',
      'REQUEST_METHOD'=> 'POST',
    );

    $p = array(
      'nkconnect_otp'   => 'aaaa_bbbb',
      'nkconnect_token' => 'token_abc'
    );

    $ss = array(
      'nkconnect_some_key_otp' => 'aaaa_bbbb_ccc',
    );

    $this->request->expects($this->any())->method('getServerData')->will($this->returnValue($s));
    $this->request->expects($this->any())->method('getPostData')->will($this->returnValue($p));
    $this->request->expects($this->any())->method('getSessionData')->will($this->returnValue($ss));
    $this->request->expects($this->any())->method('getRequestData')->will($this->returnValue(array('nkconnect_state' => '2')));
    $this->request->expects($this->once())->method('terminate');

    ob_start();
    $this->object->handleCallback();
    $result = ob_get_clean();

    $this->assertContains('"result":false', $result);
  }

  /**
   *
   */
  public function testButton()
  {
    $s = array(
      'HTTPS'         => 'on',
      'HTTP_HOST'     => 'localhost',
      'REQUEST_URI'   => '/some/path.php?aaa=bbb',
      'REQUEST_METHOD'=> 'POST',
    );
    $ss = array(
      'nkconnect_some_key_otp' => 'aaaa_bbbb_ccc',
    );

    $this->request->expects($this->any())->method('getServerData')->will($this->returnValue($s));
    $this->request->expects($this->any())->method('getSessionData')->will($this->returnValue($ss));

    $result = $this->object->button();

    $this->assertTag(array('tag' => 'script'), $result);
    $this->assertContains('nk.OAuth.create_button', $result);
    $this->assertContains('some_key', $result);
    $this->assertContains('https://localhost/some/path.php?aaa=bbb&nkconnect_state=1', $result);
    $this->assertContains('aaaa_bbbb_ccc', $result);
  }

  /**
   *
   */
  public function testLogout()
  {
    $this->request->expects($this->at(0))->method('unsetSessionData')->with('nkconnect_some_key_token');
    $this->request->expects($this->at(1))->method('unsetSessionData')->with('nkconnect_some_key_token_exp');
    $this->request->expects($this->at(2))->method('unsetSessionData')->with('nkconnect_some_key_otp');

    $this->object->logout();
  }

  public function testLogoutLink()
  {
    $s = array(
      'HTTPS'         => 'on',
      'HTTP_HOST'     => 'localhost',
      'REQUEST_URI'   => '/some/path.php?aaa=bbb',
      'REQUEST_METHOD'=> 'POST',
    );
    $this->request->expects($this->any())->method('getServerData')->will($this->returnValue($s));
    $this->assertSame('https://localhost/some/path.php?aaa=bbb&nkconnect_state=-1', $this->object->logoutLink());
  }

  /**
   *
   */
  public function testGetTokenAvail()
  {
    $ss = array(
      'nkconnect_some_key_token' => 'aaaa_bbbb_ccc',
      'nkconnect_some_key_token_exp' => time() + 10,
    );
    $this->request->expects($this->any())->method('getSessionData')->will($this->returnValue($ss));

    $this->assertSame('aaaa_bbbb_ccc', $this->object->getToken());
  }

  /**
   *
   */
  public function testGetTokenUnavailNoSession()
  {
    $ss = array();
    $this->request->expects($this->any())->method('getSessionData')->will($this->returnValue($ss));

    $this->assertNull($this->object->getToken());
  }

  public function testGetTokenUnavailExpired()
  {
    $ss = array(
      'nkconnect_some_key_token' => 'aaaa_bbbb_ccc',
      'nkconnect_some_key_token_exp' => time() - 10,
    );
    $this->request->expects($this->any())->method('getSessionData')->will($this->returnValue($ss));

    $this->assertNull($this->object->getToken());
  }

  /**
   *
   */
  public function testTokenAvailablePos()
  {
    $ss = array(
      'nkconnect_some_key_token' => 'aaaa_bbbb_ccc',
      'nkconnect_some_key_token_exp' => time() + 10,
    );
    $this->request->expects($this->any())->method('getSessionData')->will($this->returnValue($ss));

    $this->assertTrue($this->object->tokenAvailable());
  }


  /**
   *
   */
  public function testTokenAvailableNegNoSession()
  {
    $ss = array();
    $this->request->expects($this->any())->method('getSessionData')->will($this->returnValue($ss));

    $this->assertFalse($this->object->tokenAvailable());
  }

  /**
   *
   */
  public function testTokenAvailableNegExpired()
  {
    $ss = array(
      'nkconnect_some_key_token' => 'aaaa_bbbb_ccc',
      'nkconnect_some_key_token_exp' => time() - 10,
    );
    $this->request->expects($this->any())->method('getSessionData')->will($this->returnValue($ss));

    $this->assertFalse($this->object->tokenAvailable());
  }
}
?>
